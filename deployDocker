#!/bin/bash

# black='\e[0;30m'
# grey='\e[1;30m'
darkred='\e[0;31m'
# pink='\e[1;31m'
darkgreen='\e[0;32m'
lightgreen='\e[1;32m'
orange='\e[0;33m'
# yellow='\e[1;33m'
darkblue='\e[0;34m'
lightblue='\e[1;34m'
# darkpurple='\e[0;35m'
# lightpurple='\e[1;35m'
# darkcyan='\e[0;36m'
# lightcyan='\e[1;36m'
# lightgrey='\e[0;37m'
# white='\e[1;37m'
color_off='\e[0;m'

function getDockerStatus {

    if systemctl status docker &>/dev/null; then

        echo "running"

    else

        return 0

    fi

}

dockerStatus=$(getDockerStatus)
os=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')

function installDocker {

	if [ ! -f /usr/bin/docker ]  && [ "${dockerStatus}" != "running" ]; then

		if [[ ${os} == "debian" ]]; then

			echo -e "${lightblue} [+] Installing Docker for Debian ${color_off}"

			# Add Docker's official GPG key:
			apt-get update &>/dev/null
			apt-get install ca-certificates curl &>/dev/null
			install -m 0755 -d /etc/apt/keyrings &>/dev/null
			curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc &>/dev/null
			chmod a+r /etc/apt/keyrings/docker.asc

			# Add the repository to Apt sources:
			echo \
			"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
			$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
			tee /etc/apt/sources.list.d/docker.list > /dev/null
			apt-get update &>/dev/null
			apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &>/dev/null

			if [[ "${dockerStatus}" == "running" ]]; then

				echo -e "${lightgreen} [!] Docker installed successfully ${color_off}"

			fi


		fi

		if [[ ${os} == "fedora" ]]; then

			echo -e "${darkblue} [+] Installing Docker for Fedora ${color_off}"
			dnf -y install dnf-plugins-core &>/dev/null
			dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo &>/dev/null
			dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &>/dev/null
			
			if [[ "${dockerStatus}" == "running" ]]; then

				echo -e "${lightgreen} [!] Docker installed successfully ${color_off}"

			fi
		fi

	else 

		echo -e "${darkred} [!] Docker is already installed and active! ${color_off}"	

	fi
}

function deployVault {

	if [[ "${dockerStatus}" == "running" ]]; then

		echo -e "${lightblue} [+] DÃ©ploiement de vaultwarden ... ${color_off}"
		read -rp "Give me the container name : " container
		token=$(openssl rand -base64 64)
		if [ ! -d "${DIR}"/vault ]; then
			mkdir /root/vault
		fi
		docker run -d --name "${container}" -e ADMIN_TOKEN="${token}" -v /root/vault:/data -p 8080:80 vaultwarden/server:latest &>/dev/null

		echo -e "${lightgreen} [!] Vaultwarden Admin Token (Please save it securely and clear the terminal after) : $token ${color_off}"

		if [[ $(docker container ls | grep -q ${container}) ]]; then
			
			echo -e "${lightgreen} [-] Vaultwarden has been deployed successfully ${color_off}"

		fi

	else

		echo -e "${darkred} [!] Docker is not running... ${color_off}"

	fi
}

function removeContainer {

	if [[ "${dockerStatus}" == "running" ]]; then

		read -rp "Give me the container name : " container    

		if [[ $(docker ps -a | grep -q "${container}") ]] ; then

			echo -e "${darkblue} [+] Removing ${container} ${color_off}"

			if [[ "${container}" == "vault" ]]; then

				docker stop vault &>/dev/null
				docker rm vault &>/dev/null
				docker rmi vaultwarden/server:latest
				rm -rf /root/vault

			else
				read -rp "Give me the container image name : " images
				docker stop "${container}" &>/dev/null
				docker rm "${container}" &>/dev/null
				docker rmi "${images}" &>/dev/null
			fi

		else 

			echo -e "${darkred} [!] This container is not present ${color_off}"

		fi

	else

		echo -e "${darkred} [!] Docker is not running, it's probably not installed... ${color_off}"

	fi

}

function removeDocker {

	if [ -f /usr/bin/docker ] && [ "${dockerStatus}" == "running" ] ; then

		echo -e "${lightblue} [+] Removing Docker... ${color_off}"

		container=$(docker ps -a)
		img=$(docker images)
		
		if [[ "${os}" == "debian" ]]; then

			rm /etc/apt/sources.list.d/docker.list /usr/bin/docker
			docker rm "$container" &>/dev/null
			docker rmi "$img" &>/dev/null
			apt-get -y remove --purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &>/dev/null


			if [[ ! "${dockerStatus}" == "running" ]]; then

				echo -e "${lightgreen} [-] Docker has been removed successfully ${color_off}"

			fi
		
		elif [[ "${os}" == "fedora" ]]; then

			docker rm "$container" &>/dev/null
			docker rmi "$img" &>/dev/null
			dnf remove dnf-plugins-core docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin &>/dev/null

			if [ "${dockerStatus}" != "running" ]; then

				echo -e "${lightgreen} [!] Docker has been removed successfully ${color_off}"

			fi

		fi

	else

		echo -e "${darkred} [-] Docker is not installed ${color_off}"

	fi

}


if [[ $(getDockerStatus) == "running" ]]; then

	echo "docker is running"

fi

if [[ "$1" == "--install" ]]; then

    installDocker

fi

if [[ "$1" == "--vault" ]]; then

    deployVault

fi

if [[ "$1" == "--remove" ]]; then

	removeDocker

fi

if [[ "$1" == "--removeContainer" ]]; then

	removeContainer

fi
